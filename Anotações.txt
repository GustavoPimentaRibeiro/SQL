------- Aula 1 (O que é um Banco de Dados?) -------
-> Arquivos guardam tabelas, tabelas armazenam registros
-> Acesso direto - forma de armazenar fichas que facilitavam o acesso direto a um índice de ficha
-> Em um banco de dados precisamos de:
    -> Base de Dados - onde os dados ficam
    -> Sistema Gerenciador - que gerencia os dados
    -> Linguagem de Exploração - linguagem de acesso a dados
    -> Programas adicionais - tudo que for extra de acordo com o software
-> Existem três modelos de dados criados pela IBM:
    -> Modelo Hierárquico - dados interligados de forma hierárquica
    -> Modelo em Rede - dados interligados sem nenhuma forma hierárquica
    -> Depois:
        -> Modelo Relacional - dados que são relacionados um ao outro
        -> Modelo Baseado em Documentos - 
        -> Modelo Orientado a Objeto - 
-> O SQL já teve vários nomes, como:
    -> Structured English Query Language (SQUEL)
    -> Structured Query Language (SQL)
-> Existem outros bancos de dados como:
    -> Pagos:
        -> Oracle
        -> IBM
        -> dBASE
        -> Microsoft SQL Server
    -> Gratuitos:
        -> MySQL
        -> MariaDB
        -> Firebird
        -> PostgreeSQL




------- Aula 2.1 (Instalando o MySQL com WAMP) -------
-> Estrutura do SQL:
    -> DDL (Data Definition Language) - Definição - criar um banco de dados, criar uma tabela e etc (Qualquer coisa que altere a definição do banco de dados)
        -> CREATE TABLE, CREATE DATABASE, ALTER TABLE, DROP TABLE
    -> DML (Data Manipulation Language) - Manipulação - para manipulação dos dados do banco de dados
        -> INSERT INTO, UPDATE, DELETE, TRUNCATE, SELECT(alguns colocam)
    -> DQL (Data Query Language) - Solicitações - para consultar o banco de dados
        -> SELECT
    -> DCL (Data Control Language) - Controle - todos os tipos de acessos de dados que cada tipo de usuário vai ter
    -> DTL (Data Transaction Language) - Transações - qualquer solicitação que pode ser feita a um banco de dados e respondendo da melhor maneira possível utilizando dos outros 4 princípios (DICA)
        -> Durabilidade - todo dado que é inserido, alterado ou manipulado tem que permanecer durável
        -> Isolamento - duas transações podem ser executadas ao mesmo tempo, tem de permancerem isoladas umas das outras
        -> Consistência - toda transação precisa levar o banco de um estado consistente a outro consistente, se tudo estava bem, então deve continuar bem
        -> Atomicidade - ou todas as ações são executadas, ou nada acontece




------- Aula 2.2 (Instalando o XAMPP) -------


------- Aula 3 (Criando o primeiro Banco de Dados) -------
-> Dar ponto e vírgula(;) toda vez que finalizar um comando de linha
-> Tipos de dados do SQL:
    -> Numéricos:
        -> Inteiro
            -> TinyInt, SmallInt, Int, MediumInt, BigInt
        -> Real
            -> Decimal, Float, Double, Real
        -> Lógico
            -> Bit, Boolean
    -> Data/Tempo
            -> Date, DateTime, TimeStamp, Time, Year
    -> Literal:
        -> Caractere
            -> Char, VarChar (Char é tamanho fixo e VarChar é tamanho variável)
        -> Texto
            -> TinyText, Text, MediumText, LongText
        -> Binário
            -> Blob, TinyBlob, MediumBlob, LongBlob
        -> Coleção
            -> Enum, Set (para fazer valores específicos permitidos)
    -> Espacial:
        -> Geometry, Point, Polygon, MultiPolygon

--- SQL ---
-> CREATE - palavra reservada para criação
    -> CREATE DATABASE banco - para criar uma base de dados com nome "banco"
        -> CREATE DATABASE banco DEFAULT CHARACTER SET utf8mb3 DEFAULT COLLATE utf8mb4_general_ci; - para ter um banco de dados voltado para a formatação UTF-8, que tem as regras de acentuação, "DEFAULT CHARACTER SET utf8mb4" e "DEFAULT COLLATE utf8mb4_general_ci" são constraints, e o "DEFAULT COLLATE utf8mb4_general_ci" é para definição dos caracteres de modo geral, para todas as linguagens mais atualizadas
    -> CREATE TABLE tabela - cria uma tabela com o nome de "tabela"
        -> CREATE TABLE tabela(tipo1 varchar(20), tipo2 int, tipo3 float ...) - para criar uma tabela já com os atributos dentro
            -> CREATE TABLE tabela(tipo1 varchar(20), tipo2 int, tipo3 float ...) DEFAULT CHARSET = utf8mb4 - para definir a tabela que tem regras do utf-8 mais atualizadas
        -> CREATE TABLE IF EXISTS/IF NOT EXISTS tabela(tipo1 varchar(20), tipo2 int, tipo3 float ...) - para criar uma tabela se ela existir ou se ela não existir, criação situacional
-> USE banco - para fazer com que os comandos que foram digitados naquele momento estejam em uso do "banco" que já existe
-> DESCRIBE/DESC tabela - para mostrar a descrição da "tabela" que existe no "banco"

--- SQL cmd ---
-> Aceita todos os comandos do SQL Workbench ou PHPMyAdmin
-> show databases - para mostrar os bancos atuais
-> status - para mostrar as informações do banco atual
-> show tables - para mostrar as tabelas atuais do banco atual
-> exit - para sair do cmd




------- Aula 4 (Melhorando a Estrutura do Banco de Dados) -------
-> Existem constraints diferentes para cada tipo de dado no SQL, sendo eles:
    -> NOT NULL - para indicar que o campo não pode ser nulo
    -> DEFAULT 'Brasil' - para colocar o valor padrão como 'Brasil'
    -> AUTO_INCREMENT - para incrementar a cada criação de dado (geralmente usado no id de cada tabela)
    -> UNIQUE - para deixar a coluna que tenha somente nomes únicos, que eles não se repitam
    -> UNSIGNED - para tirar o bit de sinal da mantissa do número
-> É possível colocar nome de tabelas e de atributos com acentuação, no entanto para colocar o nome ou atributo é necessário usar crase (``)
-> Sempre criar um 'id' para todas as tabelas para que cada dado seja único

--- SQL ---
-> DROP - para deletar algo
    -> DROP DATABASE banco - para deletar o "banco" desejado
    -> DROP TABLE tabela - para deletar a "tabela" no banco atual
-> enum('M', 'F') - só aceita valores M e F
-> decimal(5, 2) - o número terá 5 casas, 3 inteiras e 2 decimais(999,99)
-> PRIMARY KEY (id) - indica a chave primária da tabela, 




------- Aula 5 (Inserindo Dados na Tabela (INSERT INTO)) -------
-> Se o ID estiver com a constraint AUTO_INCREMENT, então quando for inserir um novo dado na tabela, não precisará de passar por parâmetro no INSET INTO nem no VALUES (mas se quiser colocar, tome cuidado, use o dentro do VALUES o valor DEFAULT para inserir)

--- SQL ---
-> INSERT INTO tabela(tipo1, tipo2, tipo3 ...) VALUES ('1', '2', 'a' ...), ... - para inserir um ou mais dados na tabela nas colunas específicas
    -> INSERT INTO tabela VALUES ('1', '2', 'a' ...), ... - para inserir um ou mais dados na tabela tendo que preencher todos os campos para a inserção
-> SELECT * FROM tabela - para consultar todos os dados dentro da "tabela"




------- Aula 6 (Alterando a Estrutura da Tabela (ALTER TABLE e DROP TABLE)) -------
-> Caso uma nova coluna receba a constraint NOT NULL e quer iniciá-la com um valor padrão, utilize a constraint "DEFAULT valor", sendo este "valor" qualquer coisa

--- SQL ---
-> ALTER TABLE tabela - para alterar uma "tabela"
    -> ALTER TABLE tabela ADD COLUMN profissao varchar(10) - para adicionar uma nova coluna "profissao" na tabela do tipo string variável de 10 posições (não precisa do ADD COLUMN para adicionar de fato, pode simplificar para somente ADD caso queira)
        -> ALTER TABLE tabela ADD COLUMN profissao varchar(10) AFTER nome - para adicionar uma nova coluna "profissao" após a coluna "nome" na "tabela"
        -> ALTER TABLE tabela ADD COLUMN profissao varchar(10) FIRST - para adicionar uma nova coluna "profissao" na primeira coluna da tabela
    -> ALTER TABLE tabela DROP COLUMN profissao - para deletar a coluna "profissao" da "tabela"

    -> ALTER TABLE tabela MODIFY COLUMN profissao varchar(20) - modifica a coluna "profissao" da "tabela" para uma string variável de 20 caracteres (só funciona para mudar a tipagem da coluna e as constraints, não funciona para renomear a coluna, também pode ocultar a palavra COLUMN do argumento caso queira simplificar)

    -> ALTER TABLE tabela CHANGE COLUMN profissao prof varchar(20) - modifica o nome da coluna "profissao" para "prof" da "tabela", ela tem o poder de mudar o nome, tipo e constraints da coluna (pode ocultar o COLUMN caso queira)

    -> ALTER TABLE tabela RENAME TO tab - renomeia a "tabela" para o nome "tab"

    -> ALTER TABLE tabela ADD PRIMARY KEY(id) - para adicionar a coluna da chave primária "id" dentro da "tabela"

    -> ALTER TABLE tabela DROP 'nome' - para excluir a coluna 'nome' da "tabela"




------- Aula 7 (Manipulando Linhas (UPDATE, DELETE e TRUNCATE)) -------

--- SQL ---
-> UPDATE - para modificar uma linha da "tabela"
    -> UPDATE tabela SET nome='HTML5' WHERE id='1' - para modificar o valor de "nome" para 'HTML5' onde o "id" é igual a '1' (também é possível modificar mais de uma coluna ao mesmo tempo em 1 só comando, é só separar as colunas por vírgula e o próximo valor dela)
        -> UPDATE tabela SET nome='HTML5', ano='2015' WHERE id='1' - para modificar mais de uma coluna ao mesmo tempo
        -> UPDATE tabela SET nome='HTML5', ano='2015' WHERE ano='2018' LIMIT 1 - para modificar somente 1 registro da 'tabela', pois o parâmetro 'LIMIT' aceita como argumento a quantidade de modificações que serão feitas
-> DELETE - para deletar uma linha da "tabela"
    -> DELETE FROM tabela WHERE id='8' - para apagar a linha da 'tabela' com o 'id' igual a '8'
        -> DELETE FROM tabela WHERE ano='2018' LIMIT 1 - o 'DELETE' também aceita o parâmetro de 'LIMIT'
-> TRUNCATE - para apagar todos os registros de uma 'tabela'
    -> TRUNCATE TABLE tabela - apaga todos os registros da 'tabela'




------- Aula 8 (Gerenciando Cópias de Segurança MySQL) -------
-> Para fazer um backup da base de dados no MySQL Workbench é necessário:
    -> Clicar na guia 'Server'
    -> Clicar em 'Data Export'
    -> Selecionar a base de dados que deseja fazer backup e as tabelas (backup do banco de dados é chamado de DUMP)
        -> Também é possível selecionar se quer guardar somente os dados, somente a estrutura ou os dois, adicionalmente vai ser possível também guardar procedures, evenets e triggers
        -> Marcar a opção embaixo 'Include Create Schema' para não precisar criar todo o banco de dados antes para voltar o backup caso queira
    -> Clique em 'Start Export'
-> Para importar o backup feito no MySQL Workbench é necessário:
    -> Clicar na guia 'Server'
    -> Clicar em 'Data Import'
    -> Navegue e escolha a pasta onde está o arquivo de backup
    -> Clique em 'Start Import'




------- Aula 9 (PHPMyAdmin (Parte 1)) -------
-> Para entrar no PHPMyAdmin do seu navegador é só digitar na barra de URL o seguinte endereço 'localhost/phpmyadmin', automaticamente você será redirecionado




------- Aula 10 (PHPMyAdmin (Parte 2)) -------
-> Todos os comandos aceitos no MySQLWorkbench também são aceitos no cmd e no PHPMyAdmin
-> Também é possível salvar uma cópia de backup pelo PHPMyAdmin utilizando quase da mesma ideia, é só clicar na aba "Exportar" no navegador e configurar como quer seu backup

--- PHPMyAdmin(cmd) ---
-> show create table tabela - para mostrar como foi feito a criação da "tabela" no console




------- Exercício para curso de MySQL -------


------- Aula 11 (SELECT (Parte 1)) -------

--- SQL ---
-> SELECT - para fazer uma seleção na "tabela" que deseja ver informações
    -> SELECT * FROM tabela - mostra todos os dados da "tabela"
        -> SELECT * FROM tabela ORDER BY coluna ASC - mostra todos os dados da "tabela" ordenado pela 'coluna' em ordem crescente
            -> SELECT * FROM tabela ORDER BY coluna1, coluna2 - também é possível ordenar por duas ou mais colunas ao mesmo tempo
        -> SELECT * FROM tabela ORDER BY coluna DESC - mostra todos os dados da "tabela" ordenado pela 'coluna' em ordem decrescente
    -> SELECT coluna1, coluna2 FROM tabela - para mostrar apenas a 'coluna1' e 'coluna2' da "tabela"
    -> SELECT * FROM tabela WHERE id='1' - para mostrar apenas registros que contém "id='1'", o 'WHERE' também aceita condicionais booleanas, como =, >, >=, <, <=, !=/<>, AND, OR
        -> SELECT * FROM tabela WHERE id BETWEEN '1' AND '20' - para selecionar apenas os registros da "tabela" que tem 'id' entre '1' e '20', por isso a palavra 'BETWEEN'
        -> SELECT * FROM tabela WHERE id IN ('1', '3') - para selecionar registros na "tabela" onde o 'id' tem o valor que está no conjunto descrito depois do 'IN', ou seja, '1' e '3'




------- Aula 12 (SELECT (Parte 2)) -------
-> 

--- SQL ---
-> SELECT * FROM tabela WHERE nome LIKE 'p/P%' - para fazer uma seleção com um coringa(%), ele vai selecionar todos os registros da "tabela" que tem "p/P" como sendo inicial da palavra, o '%' substitui nenhum ou vários caracteres, igual a expressão regular
    -> SELECT * FROM tabela WHERE nome LIKE '%A' - seleciona todas os registros que acabam com "A"
    -> SELECT * FROM tabela WHERE nome LIKE '%A%' - seleciona todas os registros que tem "A" no meio do "nome", lembrando que '%' pode ser vazio
        -> SELECT * FROM tabela WHERE nome NOT LIKE '%A%' - seleciona todas os registros que não tem "A" no meio do "nome"
    -> SELECT * FROM tabela WHERE nome LIKE 'P%P_' - seleciona todos os registros que tenham "P" com sufixo e a penúltima letra, mas que termina com qualquer caractere no final, '_' é um coringa que indica qualquer caractere, mas ele é exatamente 1 caractere
-> SELECT DISTINCT coluna FROM tabela - seleciona somente os registros únicos da 'coluna' selecionada, por exemplo, se houver o valor 40 para dois registros, então somente o primeiro será selecionado
-> AGREGAÇÃO:
    -> SELECT COUNT(*) FROM tabela - para contar os registros que existem na "tabela", pode contar uma 'coluna' também
        -> SELECT count(*) FROM tabela WHERE coluna > 40 - para contar os registros que existem na "tabela" que tem 'coluna' maior que '40'
    -> SELECT MAX(coluna) FROM tabela - para pegar o valor máximo da 'coluna' da 'tabela'
    -> SELECT MIN(coluna) FROM tabela - para pegar o valor mínimo da 'coluna' da 'tabela'
    -> SELECT SUM(coluna) FROM tabela - para pegar o somatório da 'coluna' da 'tabela'
    -> SELECT AVG(coluna) FROM tabela - para pegar a média da 'coluna' da 'tabela'

--- EXERCÍCIOS ---
-> 1 - "Uma lista com o nome de todas as gafanhotas"
    -> select nome from gafanhotos where sexo in ('f');
-> 2 - "Uma lista com os dados de todos aqueles que nasceram entre 1/Jan/2000 e 31/Dez/2015"
    -> select * from gafanhotos where nascimento between '2000-01-01' and '2015-12-31';
-> 3 - "Uma lista com o nome de todos os homens que trabalham como Programadores"
    -> select nome from gafanhotos where sexo in ('m') and profissao = 'programador';
-> 4 - "Uma lista com todos os dados de todas as mulheres que nasceram no Brasil e que têm seu nome iniciando com a letra J"
    -> select * from gafanhotos where sexo in ('f') and nacionalidade = 'brasil' and nome like 'j%';
-> 5 - "Uma lista com o nome e nacionalidade de todos os homens que têm Silva no nome, não nasceram no Brasil e pesam menos de 100kg"
    -> select nome, nacionalidade from gafanhotos where nome like '%silva%' and nacionalidade <> 'Brasil' and peso < '100';
-> 6 - "Qual é a média de peso dos gafanhotos cadastrados?"
    -> select avg(peso) from gafanhotos;
-> 7 - "Qual é o menor peso entre as mulheres que nasceram fora do Brasil e entre 01/Jan/1990 e 31/Dez/2000?"
    -> select min(peso) from gafanhotos where sexo in ('f') and nacionalidade <> 'Brasil' and nascimento between '1990-01-01' and '2000-12-31';




------- Aula 13 (SELECT (Parte 3)) -------
-> É possível fazer selects aninhados um ao outro para obter melhores resultados

--- SQL ---
-> AGRUPAMENTO:
    -> SELECT coluna FROM tabela GROUP BY coluna - para fazer uma seleção da 'coluna' da 'tabela' que será agrupado pelos valores da 'coluna', ou seja, todos os registros com o mesmo valor de 'coluna' serão agrupados
        -> SELECT coluna, count(coluna1) FROM tabela GROUP BY coluna HAVING COUNT(coluna1) > 3 - para fazer a seleção agrupada pela 'coluna', mas o 'HAVING' servirá como condicional final, ou seja, todos as outras operações serão executadas e no final de tudo será feito a condicional do 'HAVING'
-> SELECT coluna, count(coluna1) FROM tabela GROUP BY coluna - para fazer uma seleção da 'coluna' da 'tabela' que será agrupado pelos valores da 'coluna' e contando a quantidade de 'coluna1' para cada agrupamento

--- EXERCÍCIOS ---
-> 1 - "Uma lista com as profissões dos gafanhotos e seus respectivos quantitativos"
    -> select profissao, count(profissao) from gafanhotos group by profissao;
-> 2 - "Quantos gafanhotos homens e quantas mulheres nasceram após 01/Jan/2005"
    -> select sexo, count(sexo) from gafanhotos where nascimento > '2005-01-01' group by sexo;
-> 3 - "Uma lista com os gafanhotos que nasceram fora do Brasil, mostrando o país de origem e o total de pessoas nascidas lá. Só nos interessam os países que tiverem mais de 3 gafanhotos com essa nacionalidade"
    -> select nacionalidade, count(nacionalidade) from gafanhotos where nacionalidade <> 'Brasil' group by nacionalidade having count(nacionalidade) > 3;
-> 4 - "Uma lista agrupada pela altura dos gafanhotos, mostrando quantas pessoas pesam mais de 100kg e que estão acima da média de altura de todos os cadastrados"
    -> select altura, count(peso) from gafanhotos where peso > '100' group by altura having altura > (select avg(altura) from gafanhotos);




------- Aula 14 (Modelo Relacional) -------
-> 

--- SQL ---
-> 

------- Aula 15 (Chaves Estrangeiras e JOIN) -------
-> 

--- SQL ---
-> 

------- Aula 16 (INNER JOIN com várias tabelas) -------
-> 

--- SQL ---
-> 